#!/bin/sh
#
# Pre-commit hook to check for non-ASCII file names and security weaknesses in Python files.

# Determine the commit base
if git rev-parse --verify HEAD >/dev/null 2>&1
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=$(git hash-object -t tree /dev/null)
fi

# Redirect output to stderr.
exec 1>&2

# Define the report file
report_file="security_findings.csv"

# Add unique column headers to the report file (only if it's missing or empty)
if [ ! -s $report_file ]; then
    echo "source_file,detected_issue,issue_code,severity_level,confidence_level,associated_cwe,description,line_no,start_col,end_col,line_span,reference_url" > $report_file
fi

# Scan only staged Python files
changed_python_files=$(git diff --cached --name-only --diff-filter=ACMR | grep '\.py$')

if [ -n "$changed_python_files" ]; then
    echo "Scanning staged Python files for potential security risks..."
    for file in $changed_python_files; do
        echo "Analyzing $file..."
        bandit -f csv -r $file | tail -n +2 >> $report_file
    done
fi

# Perform a global scan on all Python files in the project
echo "Conducting a full scan on the project's Python files..."
bandit -f csv -r . | tail -n +2 >> $report_file

# Display a summary of issues found
if grep -q 'HIGH\|MEDIUM' $report_file; then
    echo "High or medium severity issues detected:"
    grep 'HIGH\|MEDIUM' $report_file | cut -d',' -f1 | sort | uniq
    echo "Resolve these issues before committing. The full report is saved in $report_file."
    exit 1
fi

echo "No high or medium severity issues found. Security analysis is complete."

# Check for non-ASCII file names
allownonascii=$(git config --type=bool hooks.allownonascii)
if [ "$allownonascii" != "true" ] &&
    test $(git diff-index --cached --name-only --diff-filter=A -z $against |
      LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
    cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause issues when working with team members on other platforms.

Rename the file to be portable.

If you know what you're doing, you can disable this check using:

  git config hooks.allownonascii true
EOF
    exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --
